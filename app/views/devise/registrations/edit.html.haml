.container
  .forms
    = form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f|
      = devise_error_messages!
      
      .field#image
        %label#uploadlabel{:ondragover => "return false"}
          %i.icon-upload
          = image_tag current_user.avatar.url(:medium), id: "img"
          = f.file_field :avatar, accept: "image/*"
          %span.loader

      .field.genderswitch
        = f.check_box :is_female, class: "switch", id: "gender"
        %label{:for => "gender"} Geschlecht


      .field.date
        = f.date_select :date_of_birth, start_year: 1950, end_year: Date.current.year
        %br/
        = f.label :date_of_birth, "Geburtsdatum"

      .form-group.email
        = f.email_field :email, required: true
        = f.label :email
        %span.bar
        - if devise_mapping.confirmable? && resource.pending_reconfirmation?
          %div
            Currently waiting confirmation for: #{resource.unconfirmed_email}


      = render 'editPW', f: f
      
      %hr

      %p Um dein Konto vor unbefugten Änderungen zu sichern musst Du dein aktuelles Passwort eingeben.
      %br
      .form-group
        = f.password_field :current_password, autocomplete: "off", required: true
        = f.label :current_password, "Aktuelles Passwort"
        %span.bar

      .actions
        = f.submit "Aktualisieren", class: "btn"
        %br
        %br
        %p 
          Um deinen Account zu löschen klicke hier:
          #{link_to "Account löschen", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete}

:javascript

  "use strict";

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  (function() {
    "use strict";
    var FileUploader = (function() {
      function FileUploader() {
        _classCallCheck(this, FileUploader);
      }

      FileUploader.prototype.cache = function cache() {
        this.$fileInput = document.querySelector("#user_avatar");
        this.$img = document.querySelector("#img");
        this.$label = document.querySelector("#uploadlabel");
      };

      FileUploader.prototype.events = function events() {
        this.$fileInput.addEventListener(
          "change",
          this._handleInputChange.bind(this)
        );
        this.$img.addEventListener("load", this._handleImageLoaded.bind(this));
        this.$label.addEventListener(
          "dragenter",
          this._handleDragEnter.bind(this)
        );
        this.$label.addEventListener(
          "dragleave",
          this._handleDragLeave.bind(this)
        );
        this.$label.addEventListener("drop", this._handleDrop.bind(this));
      };

      FileUploader.prototype.init = function init() {
        this.cache();
        this.events();
      };

      FileUploader.prototype._handleDragEnter = function _handleDragEnter(e) {
        e.preventDefault();

        if (!this.$label.classList.contains("dragging")) {
          this.$label.classList.add("dragging");
        }
      };

      FileUploader.prototype._handleDragLeave = function _handleDragLeave(e) {
        e.preventDefault();

        if (this.$label.classList.contains("dragging")) {
          this.$label.classList.remove("dragging");
        }
      };

      FileUploader.prototype._handleDrop = function _handleDrop(e) {
        e.preventDefault();
        this.$label.classList.remove("dragging");

        this.$img.files = e.dataTransfer.files;
        this._handleInputChange();
      };

      FileUploader.prototype._handleImageLoaded = function _handleImageLoaded() {
        if (!this.$img.classList.contains("loaded")) {
          this.$img.classList.add("loaded");
        }
      };

      FileUploader.prototype._handleInputChange = function _handleInputChange(e) {
        var file = undefined !== e ? e.target.files[0] : this.$img.files[0];

        var pattern = /image-*/;
        var reader = new FileReader();

        if (!file.type.match(pattern)) {
          alert("invalid format");
          return;
        }

        this.$img.src = "";

        reader.onload = this._handleReaderLoaded.bind(this);

        if (this.$label.classList.contains("loaded")) {
          this.$label.classList.remove("loaded");
        }

        this.$label.classList.add("loading");

        reader.readAsDataURL(file);
      };

      FileUploader.prototype._handleReaderLoaded = function _handleReaderLoaded(
      e
      ) {
        var reader = e.target;
        this.$img.src = reader.result;
        this.$label.classList.remove("loading");
        this.$label.classList.add("loaded");
      };

      return FileUploader;
    })();

    var fileUploader = new FileUploader();
    fileUploader.init();
  })();
